package com.shachar.first;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractEntityDatabase<EntityType> {
	private Connection con;
	
	public EntityType create(EntityType entity) {
		Connection connection = getConnection();
		Statement st = null; 
		try {
			st = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			String sql = insertEntitySQL(entity);
			st.executeUpdate(sql);
			return getDBEntity(entity);
		} catch (Exception e) {
			throw new RuntimeException("Could not create statement", e);
		}finally {
			if(st != null) {
				try{
					st.close();
				}catch(SQLException e) {}
			}
		}
	}
	
	abstract protected EntityType getDBEntity(EntityType entity);
	
	abstract protected String insertEntitySQL(EntityType entity);

	abstract protected EntityType entityFromResultSet(ResultSet rs) throws SQLException;
	
	protected List<EntityType> getEntitiesByQuery(String sql) throws RuntimeException{
		Connection connection = getConnection();
		Statement st = null;
		ResultSet rs = null;
		List<EntityType> entities = new ArrayList<EntityType>();
		try {
			st = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			rs = st.executeQuery(sql);
			while(rs.next()) {
				entities.add(entityFromResultSet(rs));			
			}
		} catch (Exception e) {
			throw new RuntimeException("Could not create statement", e);
		}finally {
			if(rs != null) {
				try{
					rs.close();
				}catch(SQLException e) {}
			}
			if(st != null) {
				try{
					st.close();
				}catch(SQLException e) {}
			}
		}
		return entities;
	}

	protected EntityType getSingleEntityByQuery(String sql) throws RuntimeException{
		List<EntityType> entities = getEntitiesByQuery(sql);
		if(!entities.isEmpty()) {
			return entities.get(0);
		}
		return null; 
	}
	

	protected Connection getConnection() throws RuntimeException {
		if (con == null) {
			try {
				Class.forName("com.mysql.jdbc.Driver");
				con = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/db", "root", "");
			} catch (Exception e) {
				throw new RuntimeException("Could not create connection", e);
			}
		}
		return con;
	}

	
}
