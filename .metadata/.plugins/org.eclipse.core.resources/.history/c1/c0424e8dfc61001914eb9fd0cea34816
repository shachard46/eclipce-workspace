package com.shachar.first;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.shachar.first.*;

public class PostDatabase {
	private Connection con;

	
	public Post createUser(int id, String email, String postText, int replayFor, String postSubTopic) throws RuntimeException {
		Connection connection = getConnection();
		Statement st = null; 
		try {
			st = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			String sql = String.format(
					"insert into members "
							+ "(email, postText, replayFor, postSubTopic)"
							+ " values('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')",
					email, postText, replayFor, postSubTopic);
			st.executeUpdate(sql);
			return getUserByEmail(email);
		} catch (Exception e) {
			throw new RuntimeException("Could not create statement", e);
		}finally {
			if(st != null) {
				try{
					st.close();
				}catch(SQLException e) {}
			}
		}
	}
	public User getUserByUsername(String username) {
		return getUserByQuery(String.format("select * from members where username = '%s'", username));
	}
	@Override
	public User getUserById(int id) {
		return getUserByQuery(String.format("select * from members where id = %s", id));
	}

	@Override
	public User getUserByEmail(String email) {
		return getUserByQuery(String.format("select * from members where email = '%s'", email));
	}

	@Override
	public List<User> getAllUsers() {
		return getUsersByQuery("Select * from members");
	}
	
	private User userFromResultSet(ResultSet rs) throws SQLException{
		return new User(rs.getInt("id"), rs.getString("username"), rs.getString("password"),
				rs.getString("email"), rs.getString("compType"), rs.getString("teamNumber"),
				rs.getString("country"), rs.getString("teamJob"), rs.getString("rookieTime"));
	}
	private User getUserByQuery(String sql) throws RuntimeException{
		List<User> users = getUsersByQuery(sql);
		if(!users.isEmpty()) {
			return users.get(0);
		}
		return null; 
	}
	private List<User> getUsersByQuery(String sql) throws RuntimeException{
		Connection connection = getConnection();
		Statement st = null;
		ResultSet rs = null;
		List<User> users = new ArrayList<User>();
		try {
			st = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			rs = st.executeQuery(sql);
			while(rs.next()) {
				users.add(userFromResultSet(rs));			
			}
		} catch (Exception e) {
			throw new RuntimeException("Could not create statement", e);
		}finally {
			if(rs != null) {
				try{
					rs.close();
				}catch(SQLException e) {}
			}
			if(st != null) {
				try{
					st.close();
				}catch(SQLException e) {}
			}
		}
		return users;
	}


	private Connection getConnection() throws RuntimeException {
		if (con == null) {
			try {
				Class.forName("com.mysql.jdbc.Driver");
				con = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/db", "root", "");
			} catch (Exception e) {
				throw new RuntimeException("Could not create connection", e);
			}
		}
		return con;
	}
}
